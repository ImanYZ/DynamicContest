# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-17 21:54
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(default=0)),
                ('no_information', models.BooleanField(default=False)),
                ('intermediate_information', models.BooleanField(default=False)),
                ('complete_information', models.BooleanField(default=False)),
                ('infeasiblility20Percent', models.BooleanField(default=False)),
                ('infeasiblility40Percent', models.BooleanField(default=False)),
                ('infeasible', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contestusergame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Contest')),
            ],
        ),
        migrations.CreateModel(
            name='Contestusertraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Contest')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vesion', models.IntegerField(default=0)),
                ('training_number', models.IntegerField(default=0)),
                ('contest_number', models.IntegerField(default=0)),
                ('game_number', models.IntegerField(default=0)),
                ('player_number', models.IntegerField(default=0)),
                ('training_earning', models.FloatField(default=1)),
                ('contest_earning', models.FloatField(default=5)),
                ('quit_question_earning', models.FloatField(default=0.5)),
                ('quiz_question_earning', models.FloatField(default=0.2)),
                ('training_contest_earning', models.FloatField(default=1)),
                ('game_max_minutes', models.IntegerField(default=0)),
                ('game_max_seconds', models.IntegerField(default=0)),
                ('game_minutes_to_reveal', models.IntegerField(default=0)),
                ('game_seconds_to_reveal', models.IntegerField(default=0)),
                ('total_minutes', models.IntegerField(default=0)),
                ('total_seconds', models.IntegerField(default=0)),
                ('total_training_minutes', models.IntegerField(default=0)),
                ('total_training_seconds', models.IntegerField(default=0)),
                ('initializing', models.BooleanField(default=False)),
                ('group1_initializing', models.BooleanField(default=False)),
                ('group2_initializing', models.BooleanField(default=False)),
                ('group3_initializing', models.BooleanField(default=False)),
                ('group4_initializing', models.BooleanField(default=False)),
                ('infeasibility_chance', models.IntegerField(default=50)),
                ('no_information', models.BooleanField(default=False)),
                ('intermediate_information', models.BooleanField(default=False)),
                ('complete_information', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField(default=0)),
                ('player_number', models.IntegerField(default=0)),
                ('infeasiblility20Percent', models.BooleanField(default=False)),
                ('infeasiblility40Percent', models.BooleanField(default=False)),
                ('infeasible', models.BooleanField(default=False)),
                ('value_0', models.IntegerField(default=0)),
                ('weight_0', models.IntegerField(default=0)),
                ('optimal_0', models.BooleanField(default=False)),
                ('value_1', models.IntegerField(default=0)),
                ('weight_1', models.IntegerField(default=0)),
                ('optimal_1', models.BooleanField(default=False)),
                ('value_2', models.IntegerField(default=0)),
                ('weight_2', models.IntegerField(default=0)),
                ('optimal_2', models.BooleanField(default=False)),
                ('value_3', models.IntegerField(default=0)),
                ('weight_3', models.IntegerField(default=0)),
                ('optimal_3', models.BooleanField(default=False)),
                ('value_4', models.IntegerField(default=0)),
                ('weight_4', models.IntegerField(default=0)),
                ('optimal_4', models.BooleanField(default=False)),
                ('value_5', models.IntegerField(default=0)),
                ('weight_5', models.IntegerField(default=0)),
                ('optimal_5', models.BooleanField(default=False)),
                ('value_6', models.IntegerField(default=0)),
                ('weight_6', models.IntegerField(default=0)),
                ('optimal_6', models.BooleanField(default=False)),
                ('value_7', models.IntegerField(default=0)),
                ('weight_7', models.IntegerField(default=0)),
                ('optimal_7', models.BooleanField(default=False)),
                ('value_8', models.IntegerField(default=0)),
                ('weight_8', models.IntegerField(default=0)),
                ('optimal_8', models.BooleanField(default=False)),
                ('value_9', models.IntegerField(default=0)),
                ('weight_9', models.IntegerField(default=0)),
                ('optimal_9', models.BooleanField(default=False)),
                ('value_10', models.IntegerField(default=0)),
                ('weight_10', models.IntegerField(default=0)),
                ('optimal_10', models.BooleanField(default=False)),
                ('value_11', models.IntegerField(default=0)),
                ('weight_11', models.IntegerField(default=0)),
                ('optimal_11', models.BooleanField(default=False)),
                ('max_seconds', models.IntegerField(default=0)),
                ('max_minutes', models.IntegerField(default=0)),
                ('seconds_to_reveal', models.IntegerField(default=0)),
                ('minutes_to_reveal', models.IntegerField(default=0)),
                ('winning_score', models.FloatField(default=0)),
                ('optimal_score', models.FloatField(default=0)),
                ('difficulty', models.FloatField(default=0)),
                ('no_information', models.BooleanField(default=False)),
                ('intermediate_information', models.BooleanField(default=False)),
                ('complete_information', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Gametype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField(default=0)),
                ('value_0', models.IntegerField(default=0)),
                ('weight_0', models.IntegerField(default=0)),
                ('optimal_0', models.BooleanField(default=False)),
                ('value_1', models.IntegerField(default=0)),
                ('weight_1', models.IntegerField(default=0)),
                ('optimal_1', models.BooleanField(default=False)),
                ('value_2', models.IntegerField(default=0)),
                ('weight_2', models.IntegerField(default=0)),
                ('optimal_2', models.BooleanField(default=False)),
                ('value_3', models.IntegerField(default=0)),
                ('weight_3', models.IntegerField(default=0)),
                ('optimal_3', models.BooleanField(default=False)),
                ('value_4', models.IntegerField(default=0)),
                ('weight_4', models.IntegerField(default=0)),
                ('optimal_4', models.BooleanField(default=False)),
                ('value_5', models.IntegerField(default=0)),
                ('weight_5', models.IntegerField(default=0)),
                ('optimal_5', models.BooleanField(default=False)),
                ('value_6', models.IntegerField(default=0)),
                ('weight_6', models.IntegerField(default=0)),
                ('optimal_6', models.BooleanField(default=False)),
                ('value_7', models.IntegerField(default=0)),
                ('weight_7', models.IntegerField(default=0)),
                ('optimal_7', models.BooleanField(default=False)),
                ('value_8', models.IntegerField(default=0)),
                ('weight_8', models.IntegerField(default=0)),
                ('optimal_8', models.BooleanField(default=False)),
                ('value_9', models.IntegerField(default=0)),
                ('weight_9', models.IntegerField(default=0)),
                ('optimal_9', models.BooleanField(default=False)),
                ('value_10', models.IntegerField(default=0)),
                ('weight_10', models.IntegerField(default=0)),
                ('optimal_10', models.BooleanField(default=False)),
                ('value_11', models.IntegerField(default=0)),
                ('weight_11', models.IntegerField(default=0)),
                ('optimal_11', models.BooleanField(default=False)),
                ('for_training', models.BooleanField(default=False)),
                ('for_contest', models.BooleanField(default=False)),
                ('difficulty_level', models.IntegerField(default=0)),
                ('contest_index', models.IntegerField(default=0)),
                ('difficulty', models.FloatField(default=0)),
                ('max_seconds', models.IntegerField(default=0)),
                ('max_minutes', models.IntegerField(default=0)),
                ('seconds_to_reveal', models.IntegerField(default=0)),
                ('minutes_to_reveal', models.IntegerField(default=0)),
                ('winning_score', models.FloatField(default=0)),
                ('max_score_ratio', models.FloatField(default=0)),
                ('min_score_ratio', models.FloatField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=400)),
                ('total_training_score', models.FloatField(default=0)),
                ('skill', models.FloatField(default=0)),
                ('group', models.IntegerField(default=0)),
                ('total_game_score', models.FloatField(default=0)),
                ('quiz_earning', models.FloatField(default=0)),
                ('waiting_for_game', models.BooleanField(default=False)),
                ('started_training', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished_training', models.DateTimeField(default=django.utils.timezone.now)),
                ('started_study', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished_study', models.DateTimeField(default=django.utils.timezone.now)),
                ('age', models.IntegerField(default=-1)),
                ('male', models.BooleanField(default=False)),
                ('female', models.BooleanField(default=False)),
                ('siblings', models.IntegerField(default=-1)),
                ('major', models.CharField(default='', max_length=127)),
                ('undergraduate', models.BooleanField(default=False)),
                ('graduate', models.BooleanField(default=False)),
                ('notstudent', models.BooleanField(default=False)),
                ('programyear', models.IntegerField(default=-1)),
                ('participatedbefore', models.BooleanField(default=False)),
                ('white', models.BooleanField(default=False)),
                ('asian', models.BooleanField(default=False)),
                ('africanamerican', models.BooleanField(default=False)),
                ('hispanic', models.BooleanField(default=False)),
                ('multiracial', models.BooleanField(default=False)),
                ('nativeamerican', models.BooleanField(default=False)),
                ('caucasian', models.BooleanField(default=False)),
                ('otherethnicity', models.CharField(default='', max_length=127)),
                ('stickopinion', models.IntegerField(default=-1)),
                ('achievement', models.IntegerField(default=-1)),
                ('changeopinion', models.IntegerField(default=-1)),
                ('strategies', models.TextField(blank=True, null=True)),
                ('GroupSize3', models.BooleanField(default=False)),
                ('GroupSize4', models.BooleanField(default=False)),
                ('GroupSize12', models.BooleanField(default=False)),
                ('GroupSizeNotSure', models.BooleanField(default=False)),
                ('SameOpponentYes', models.BooleanField(default=False)),
                ('SameOpponentNo', models.BooleanField(default=False)),
                ('SameOpponentNotSure', models.BooleanField(default=False)),
                ('InfeasibleIsSolvableTrue', models.BooleanField(default=False)),
                ('InfeasibleIsSolvableFalse', models.BooleanField(default=False)),
                ('InfeasibleIsSolvableNotSure', models.BooleanField(default=False)),
                ('SureGameTrue', models.BooleanField(default=False)),
                ('SureGameFalse', models.BooleanField(default=False)),
                ('SureGameNotSure', models.BooleanField(default=False)),
                ('Feasible60Infeasible40', models.BooleanField(default=False)),
                ('Feasible60Target40', models.BooleanField(default=False)),
                ('Feasible60NotSure', models.BooleanField(default=False)),
                ('quizscore', models.FloatField(default=0)),
                ('quit_question_earning', models.FloatField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Usergame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0)),
                ('started', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished', models.DateTimeField(default=django.utils.timezone.now)),
                ('submitted', models.BooleanField(default=False)),
                ('quit', models.BooleanField(default=False)),
                ('youWon', models.BooleanField(default=False)),
                ('opponentWon', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.User')),
            ],
        ),
        migrations.CreateModel(
            name='Usergameitem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_index', models.IntegerField(default=0)),
                ('to_knapsack', models.BooleanField(default=False)),
                ('from_knapsack', models.BooleanField(default=False)),
                ('move_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('usergame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Usergame')),
            ],
        ),
        migrations.CreateModel(
            name='Userquitquestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('why_quit', models.TextField(blank=True, null=True)),
                ('feasible', models.BooleanField(default=False)),
                ('infeasible', models.BooleanField(default=False)),
                ('correct', models.BooleanField(default=False)),
                ('notsure', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.User')),
                ('usergame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Usergame')),
            ],
        ),
        migrations.CreateModel(
            name='Usertraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0)),
                ('started', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished', models.DateTimeField(default=django.utils.timezone.now)),
                ('submitted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.User')),
            ],
        ),
        migrations.CreateModel(
            name='Usertrainingitem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_index', models.IntegerField(default=0)),
                ('to_knapsack', models.BooleanField(default=False)),
                ('from_knapsack', models.BooleanField(default=False)),
                ('move_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('usertraining', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Usertraining')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='gametype',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='knapsack.Gametype'),
        ),
        migrations.AddField(
            model_name='contestusertraining',
            name='usertraining',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Usertraining'),
        ),
        migrations.AddField(
            model_name='contestusergame',
            name='usergame',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knapsack.Usergame'),
        ),
        migrations.AddField(
            model_name='contest',
            name='experiment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='knapsack.Experiment'),
        ),
    ]
